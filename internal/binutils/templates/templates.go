// Code generated by vfsgen; DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2022, 1, 6, 12, 55, 52, 495333400, time.UTC),
		},
		"/repositories.html": &vfsgen۰CompressedFileInfo{
			name:             "repositories.html",
			modTime:          time.Date(2022, 1, 6, 12, 55, 52, 494333300, time.UTC),
			uncompressedSize: 1958,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xb4\x55\x4b\x6f\xdc\x36\x10\xbe\x07\xc8\x7f\x98\x10\x39\x46\x22\x8c\x1e\xe2\x2e\x24\xa1\x85\xe3\x83\x81\x3e\x02\xa3\x06\x5a\x04\x39\x70\xc9\x91\x48\x9b\x22\x15\x72\xb4\xc1\x56\xdd\xff\x5e\x50\x0f\xaf\xad\xac\x5d\xa3\x40\x74\xa1\x38\x8f\x6f\x66\xbe\x21\x87\xc3\xa0\xb0\x36\x0e\x81\x05\xec\x7c\x34\xe4\x83\xc1\xc8\x0e\x87\xd7\xaf\x8a\x37\x1f\x7e\xbf\xf8\xe3\xaf\x8f\x97\xa0\xa9\xb5\x55\x12\x64\xd9\x27\x53\x83\x25\xb8\xba\x84\xf7\x9f\x2b\x18\xbf\x22\xa9\x41\x5a\x11\x63\xc9\x9c\xcf\x6e\x23\x58\xca\x0c\xfe\x38\x2d\xe7\xd3\xf2\x9e\x55\x50\xbc\xf9\x84\x4e\x99\xfa\x73\x96\x3d\x80\x7b\x88\xf5\x02\xb8\xe7\x70\xce\x5f\x82\xf3\x24\x40\x43\x33\x46\x12\x54\x27\x00\x46\xcf\x2c\x5b\x79\x6b\x14\xaa\x7a\xfd\x6a\x8c\xd9\x22\x09\x90\x5a\x84\x88\x54\xb2\x9e\xea\xec\x9c\x2d\xba\xad\x88\x08\x3a\x60\x5d\x32\xce\xe0\x91\x87\x26\xea\x32\xfc\xd2\x9b\x5d\xc9\xfe\xcc\x6e\x7e\xce\x2e\x7c\xdb\x09\x32\x5b\x8b\x0c\xa4\x77\x84\x8e\x4a\x76\x75\x59\xa2\x6a\xf0\x9d\xd4\xc1\xb7\x58\x9e\xdd\x23\x93\x21\x8b\xd5\x30\x40\x7e\x8d\x8d\x89\x14\xf6\x1f\x7c\x2b\x8c\x83\xc3\xa1\xe0\x93\x72\xb6\xb4\xc6\xdd\x41\x40\x5b\x32\x23\xbd\x63\x40\xfb\x0e\x4b\x66\x5a\xd1\x20\x37\xd2\xb3\x25\xbf\x48\x82\x8c\xe4\xb5\xd8\x25\xbb\x3c\xa9\xbe\x85\x88\xb4\xb7\x18\x35\x22\xad\xfd\x64\x8c\x7c\xd2\xe6\x32\x46\x06\x3c\xf1\xc4\x67\xa2\x8a\xad\x57\xfb\x05\x4d\x9f\x3d\x95\xb7\x3e\x5b\x6c\x6a\x1f\xda\xf9\x7f\xdc\x1b\xd7\xf5\x04\x4e\xb4\x58\xb2\xda\x58\xc2\xb0\x14\x12\x51\x04\xa9\x59\x55\x88\xa5\x6f\xd2\xa2\x08\xac\x1a\x97\x82\x8b\x05\x92\xcf\x98\xf3\x56\x99\xdd\xe2\xf0\x35\x88\xae\xc3\xc0\x1e\x06\x24\xb1\xbd\xa7\xf0\x28\x0c\x2b\xc9\x24\xd5\xd5\xf5\x72\x91\xf6\xf0\x9b\x68\xb1\xe0\xa4\x9f\xb0\xfc\xd8\x5b\x0b\x17\xbe\x6d\x85\x53\x27\xcc\x0a\xfe\x4d\x8c\x61\x80\x20\x5c\x83\xf0\xf6\x0e\xf7\xef\xe0\xed\x4e\xd8\x1e\x61\x53\x26\x06\x8f\xd7\x17\xd2\xf5\x7d\x49\xb2\x0a\x76\xc2\x9a\xc6\x95\x8c\x7c\xc7\x4e\x98\x8c\x66\x62\xe9\x6e\x1a\x11\x7c\x18\xe6\xb0\x79\xaa\x0e\xfe\x81\x3e\xd8\x2f\x3d\x86\x3d\x1c\x0e\x9c\x44\x13\x9f\xc2\x59\x39\xae\x73\x3c\x56\x2d\x4e\xe5\xca\x49\xdd\xf7\x6b\x5d\xc4\x5c\x43\x30\x8d\x26\x06\xce\xa7\x1e\x7e\xe7\x62\x0a\xe9\x15\x56\xca\xcb\x3b\x0c\xd0\xa5\x3e\x1e\xa1\x6e\xae\xaf\xc6\x13\x3c\x9a\xfc\x8f\x22\xff\xfb\x0c\xa0\x53\x8f\xf8\x2b\xf8\xc3\x23\x5a\x70\x65\x76\x27\x0f\x77\xed\x3d\xad\xce\x76\x57\xfd\x2a\x14\xc2\x57\x43\x7a\x2e\xaa\xf8\x61\x4e\x1d\xb6\xfb\x23\x5f\x69\x44\xc5\x0d\xe7\x8d\x21\xdd\x6f\x73\xe9\x5b\x7e\x8b\x31\xd6\x41\xfc\xcd\xaa\x9f\x96\xdf\x54\x57\xc1\xbb\xc7\x01\x2e\x34\xca\x3b\xdf\x13\x90\x46\x88\xbe\x0f\x12\x21\x05\x00\x41\x9b\x67\x03\x34\xe8\x7a\xe3\x90\xbc\xb7\x91\x07\x6c\x58\xf5\x8c\xf2\x64\xe8\x5f\x44\x24\xb8\xe9\x94\x20\x54\x9b\xc4\x5c\x9e\x24\xb3\x60\x6c\xd2\xca\x61\x52\xc1\x95\x23\x0c\x3b\x61\x37\x23\xdd\xf9\x24\x5d\x84\x8f\xfc\x26\xb2\xd3\xb3\xc0\xf3\x89\xde\xf1\x55\x18\x55\x51\x06\xd3\x11\xc4\x20\x8f\xa3\xf1\x36\xf2\x49\x1c\xf3\xf4\xa0\x14\xf3\x6e\x1c\x90\xf3\x60\x2c\xf8\xfc\xe0\x0e\x03\x3a\x95\xfa\xfc\x6f\x00\x00\x00\xff\xff\x28\xdf\xd6\x50\xa6\x07\x00\x00"),
		},
		"/tags.html": &vfsgen۰CompressedFileInfo{
			name:             "tags.html",
			modTime:          time.Date(2022, 1, 8, 18, 26, 46, 42328700, time.UTC),
			uncompressedSize: 3078,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xcc\x56\x6d\x6f\xdb\x36\x10\xfe\x5e\xa0\xff\xe1\x4a\x04\x68\x03\x58\x62\xd2\xad\x6b\xe6\x48\xc2\x0a\x37\xc3\x3a\xec\x0d\x5b\x32\x6c\x08\xf2\x81\x96\x4e\x12\x1d\x9a\x54\xc9\x93\x13\x57\xf3\x7f\x1f\x68\x49\xf1\x5b\x1c\xa4\xeb\x50\xd4\x5f\x2c\xdd\xcb\x73\x77\xcf\x91\xba\x6b\x9a\x0c\x73\xa9\x11\x18\x89\xc2\xb1\xc5\xe2\xe9\x93\xe8\xd9\xdb\x5f\x47\xe7\x7f\xff\x76\x06\x25\x4d\x55\xe2\x05\x41\x70\x29\x73\x50\x04\xef\xce\xe0\xf5\x55\x02\xcb\x5f\xe4\xd5\x90\x2a\xe1\x5c\xcc\xb4\x09\x26\x0e\x14\x05\x12\xbf\x6d\xff\x4e\xda\xbf\xd7\x2c\x81\xe8\xd9\x25\xea\x4c\xe6\x57\x41\xb0\x06\xb7\x8e\xf5\x08\xb8\x87\x70\x4e\x1e\x83\xb3\x17\xa0\xa0\x0e\xc3\x0b\x92\x7b\x00\x96\x9e\x41\xb0\xe5\x5d\xa2\xc8\x92\xa7\x4f\x96\x31\xa7\x48\x02\xd2\x52\x58\x87\x14\xb3\x9a\xf2\xe0\x84\xf5\xba\xb1\x70\x08\xa5\xc5\x3c\x66\x9c\xc1\x86\x47\x49\x54\x05\xf8\xbe\x96\xb3\x98\xfd\x15\x5c\xbc\x09\x46\x66\x5a\x09\x92\x63\x85\x0c\x52\xa3\x09\x35\xc5\xec\xdd\x59\x8c\x59\x81\x83\xb4\xb4\x66\x8a\xf1\xf1\x1d\x32\x49\x52\x98\x34\x0d\x84\xbf\x63\x21\x1d\xd9\xf9\x5b\x33\x15\x52\xc3\x62\xc1\xbd\xf4\x17\x31\x45\x58\x2c\x22\xde\x1a\x76\x5e\x4a\xea\x6b\xb0\xa8\x62\x26\x53\xa3\x19\xd0\xbc\xc2\x98\xc9\xa9\x28\x90\xcb\xd4\xb0\x3e\x57\x47\x82\x64\xca\x73\x31\xf3\x76\xa1\x57\xed\x42\x38\x9a\x2b\x74\x25\x22\x6d\xfb\xa5\xce\xf1\x56\x1b\xa6\xce\x31\xe0\x9e\x33\xde\x91\x16\x8d\x4d\x36\xef\xd1\xca\xe3\xc7\xd4\x50\x1e\xf7\xf6\x99\x9c\xf5\xed\xb9\xb1\xa2\xaa\xd0\xf6\x89\xb5\xac\x88\xf1\x5d\xb1\x2b\xa1\xdd\x92\xb4\xd2\x32\xf1\xf8\x11\xa7\x72\x8f\xfa\x5c\x14\x0f\x68\xff\x90\x1f\x1e\x72\x1e\x59\x14\x84\xd9\x1e\x8b\xa6\x91\x39\x84\x3f\x08\xf7\x67\xad\xb4\x5b\x2c\xbc\x87\x7f\x44\x2b\xc6\x52\x49\x92\xe8\x96\x9e\x4d\x83\x3a\xf3\x17\x73\x03\x9e\xef\x54\xd4\x34\x60\x85\x2e\x10\x0e\xae\x71\x3e\x80\x83\x99\x50\x35\xc2\x30\xf6\xcc\x56\xc6\x49\x32\x56\xa2\x83\x1d\xa4\x3d\xd4\x64\x30\x13\x4a\x16\x3a\x66\x0a\x73\x62\xa0\x8d\x27\xfb\x1e\xd3\xbb\x5a\x0e\xd6\x8b\x11\xfd\x71\xb0\x58\x19\xdf\xc9\x36\x9f\xb6\x9f\xff\x40\x6d\xd5\xfb\x1a\xed\xdc\xb7\x99\x44\xb1\x66\x70\x2e\x0a\x2f\x9c\x79\x1c\x76\x7f\xf1\x6b\x15\xaf\xa3\xee\x37\xdb\x4e\x8e\x8b\xfd\xc0\x11\xa7\x6c\x0f\x21\x1d\x1f\x56\x16\xe5\x97\x4e\x48\xeb\xf4\x25\xf1\xd1\x67\xe6\xef\x0c\x7c\x8e\x40\xdd\xed\x0b\xbf\x37\x76\x2a\x08\xd8\xd1\x4b\xf8\x51\xe8\x01\xbc\x3c\x3a\xfa\x06\x8e\x5f\x0d\x8f\xbe\x1e\x1e\xbd\x82\x8b\xf3\x11\xfb\x98\x74\x76\xc8\xfb\xe4\x8c\xff\xa7\x93\x01\x32\x8b\xd9\xce\x8d\x18\x6e\x5b\xb3\x3d\x59\x6c\x7e\x57\x9d\x2c\xb4\x50\x2c\x89\x78\x26\x67\xfb\xf2\xe6\x22\xf9\x08\xda\x1e\xfd\x11\x43\x9d\x6d\x34\x24\xe2\xeb\x5f\xf4\x3e\xa3\xdd\x59\x90\x1b\x43\x5b\xa3\xa0\x4a\x7e\x16\x19\xc2\x8d\xa4\x12\xa2\xd4\x64\x98\x44\x5f\x45\x7c\xf9\x00\xe3\xf9\x8a\x79\x3f\x87\xdd\x90\xf3\x42\x52\x59\x8f\xc3\xd4\x4c\xf9\x04\x9d\xcb\xad\xf8\xc0\x92\xef\xfa\x47\x5f\x70\xc4\xab\xcd\x00\xa3\x12\xd3\x6b\x53\x13\x50\x89\xe0\x4c\x6d\x53\x04\x1f\x00\x04\x0d\x1f\x0c\x50\xa0\xae\xa5\x46\x32\x46\x39\x6e\xb1\x60\xc9\x03\xca\x7b\x43\xff\x24\x1c\xc1\x45\x95\xf9\x53\x3e\xf4\xcc\x85\x5e\xd2\x09\x96\x33\xb3\xda\x20\xcd\xef\x30\x3c\x6c\x69\x5a\xae\x30\x4b\x95\x4b\xad\xac\x08\x9c\x4d\x57\xb3\x7b\xe2\x78\x2b\x76\xa1\xdf\x7e\xa2\xee\xad\x73\xd9\x1e\x5c\x9b\x40\xed\x3a\x41\x78\x4b\x7c\x22\x66\xa2\x95\xae\xba\x32\x13\x16\xc4\x44\xdc\x8e\x84\x52\x0e\x62\xb8\x5c\x95\xf4\x9f\x06\xd8\xf3\x4f\xba\x35\xe1\xc4\x19\xfd\x7c\xb0\x91\xc3\xe6\xf9\xbb\x3a\xed\x9f\x6e\xa4\xce\xcc\x4d\x68\xb4\x32\x22\x83\x18\xf2\x5a\xa7\x24\x8d\x7e\x71\x08\xcd\x0a\xe0\x8d\xb5\x62\x1e\x56\xd6\x90\xf1\x4c\x84\xb9\xb1\x67\x22\x2d\xc3\x54\x28\xf5\xe2\xae\xf0\xc1\xca\xbb\xb6\x6a\x00\x52\x67\x78\x7b\xd8\xac\x17\xe6\xa3\xac\xaf\x03\xf3\x91\xa9\x35\x79\xf3\xc3\xd3\x95\xdd\x62\xf5\xb2\x38\xed\x9b\xbd\xd5\xad\xee\xe6\x45\xbc\x5b\xba\x22\xde\x2d\xf6\x77\xaa\x7f\x03\x00\x00\xff\xff\xcd\xb0\x40\x2f\x06\x0c\x00\x00"),
		},
		"/vulns.html": &vfsgen۰CompressedFileInfo{
			name:             "vulns.html",
			modTime:          time.Date(2022, 1, 6, 12, 55, 52, 495333400, time.UTC),
			uncompressedSize: 2788,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xa4\x56\x6d\x6f\xdb\x36\x10\xfe\x5e\xa0\xff\xe1\x4a\xf4\x63\x64\x22\x0d\x86\x66\x81\x2c\x6c\x4d\x82\xad\x40\xf7\x82\x36\x1d\x36\x14\xc5\x40\x49\x27\x89\x0d\x45\x6a\xe4\xc9\x9b\x27\xe8\xbf\x0f\xd4\x8b\x2d\x4b\xb6\x97\x61\xf9\x20\x2b\xe2\xdd\x73\xf7\x3c\x77\x3c\xb2\x69\x52\xcc\xa4\x46\x60\x9b\x5a\x69\xc7\xda\xf6\xf9\xb3\xf0\xc5\xdd\x4f\xb7\x0f\xbf\xfd\x7c\x0f\x05\x95\x2a\xf2\x1f\x82\xe0\x93\xcc\x40\x11\xbc\xbd\x87\xd7\x9f\x23\xe8\xfe\x42\xbf\x0c\x89\x12\xce\xad\x99\x36\xc1\x17\x07\x8a\x02\x89\x5f\xf7\x3f\xd7\xfd\xcf\x6b\x16\x41\xf8\xe2\x13\xea\x54\x66\x9f\x83\x60\x02\x37\xc5\x7a\x02\xdc\x39\x9c\xeb\xa7\xe0\x9c\x04\xc8\x69\xc0\xf0\x1f\xa2\x23\x00\x9d\x67\x10\xcc\xbc\x0b\x14\x69\xf4\xfc\x59\x17\xb3\x44\x12\x90\x14\xc2\x3a\xa4\x35\xab\x29\x0b\xae\xd9\xb8\x16\x0b\x87\x50\x58\xcc\xd6\x8c\x33\x38\xf0\x28\x88\xaa\x00\xff\xa8\xe5\x66\xcd\x7e\x0d\x3e\x7e\x1b\xdc\x9a\xb2\x12\x24\x63\x85\x0c\x12\xa3\x09\x35\xad\xd9\xdb\xfb\x35\xa6\x39\x5e\x24\x85\x35\x25\xae\x2f\x77\xc8\x24\x49\x61\xd4\x34\xb0\x7a\x8f\xb9\x74\x64\xb7\x1f\xdf\xbf\x83\xb6\xe5\xfd\xa7\xca\x40\xdb\xde\xf8\xf7\x07\x91\x43\xdb\xc2\x2f\xb5\xd2\x68\x45\x2c\x95\xa4\x2d\x78\x03\x4b\x21\xef\x51\x06\x48\x25\xf5\x23\x58\x54\x6b\x26\x13\xa3\x19\xd0\xb6\xc2\x35\x93\xa5\xc8\x91\xcb\xc4\xb0\x91\x88\x23\x41\x32\xe1\x99\xd8\x78\xbb\x95\x5f\x5a\x42\x38\xda\x2a\x74\x05\x22\xcd\xfd\x12\xe7\x78\x6c\x0c\x39\xb2\xa2\x5a\x95\x52\xaf\x12\xe7\x18\x70\xaf\x2b\x1f\x84\x0d\x63\x93\x6e\x47\xd0\x54\x6e\xc6\x92\x78\x5d\x84\xd4\x68\xc7\x88\x9d\x81\xd9\x95\x2c\xb6\x28\xd2\xc4\xd6\x65\x3c\x35\x18\x52\x8b\x42\xb1\xab\xc5\x11\xe5\x42\x2e\xa2\x90\x2b\xb9\x74\x1c\xd1\x45\x42\x72\x83\xa3\xef\x5c\xe2\x99\x6f\xc8\x8d\xdf\x40\x93\x0f\x13\x1e\x95\xc8\x31\xf0\x5c\x0f\x99\xf4\x3d\x7c\xf9\x1f\xca\x1a\xba\x52\x28\x15\x1d\xaf\x6e\xbf\x16\xf2\xe2\xf2\x20\xaf\x54\x6e\xa6\xff\x57\x63\x52\x84\x7f\x51\x60\x65\x5e\x10\x8b\xbe\x43\x8f\x47\x98\x82\xd1\x37\xd0\x34\xab\x3b\x41\xe8\x39\x56\x07\x9c\x9a\xa6\xdf\x43\xab\x37\x22\xf5\x39\x38\xf8\xca\x8f\x91\x63\x94\x85\x42\x4b\xd0\x3d\x83\x54\xe8\x1c\x2d\x03\x6b\x14\x0e\x2b\x73\x19\x9a\x66\x87\xd9\xb6\xf0\xbd\xcc\x8b\x0b\xb8\xb5\x92\x64\x22\xd4\x05\x08\x9d\x72\x63\xe1\x0e\xb3\xc4\xe8\x4b\xd8\x4c\xe8\x4b\x74\x90\x99\x5a\xa7\xa7\x29\x37\x0d\xea\xd4\xe7\x39\x31\x29\x5e\x45\x1f\xea\xb2\x14\x76\x1b\xf2\xe2\xd5\x54\x9f\x7a\xd7\x5d\x4a\x3a\x0a\x72\x6b\xea\x8a\x9d\x6e\x92\xbd\x51\x20\x09\xcb\xb9\x65\x67\xed\x2a\xa1\x77\x2d\x2b\xd2\xbc\xef\x29\x85\x1a\x56\xbd\x8a\x5e\x69\x6f\x74\xcc\x39\x8e\x1e\x0c\x09\x15\xf2\x78\x9e\xc4\xb2\x79\x9b\xc6\x7a\xa9\xe1\xe5\x23\x6e\x2f\xe0\xe5\x46\xa8\x1a\xe1\x66\x3d\x84\x79\xb3\xfd\x80\x1b\xb4\x92\xb6\xd3\xa2\xfd\x4f\x3e\x4a\xc4\xa8\xa0\x7b\x06\x4d\x93\x18\x65\x6c\x17\xbe\x6d\xa1\xaa\x95\x1a\x1b\x6c\xe0\x3b\xa4\x74\x86\x6f\xd3\x74\xee\xb0\x48\xf1\x18\xdb\xa1\xae\x7b\x9b\x7a\xb6\x07\x8b\x57\xd1\x1d\x92\x90\xca\xcd\xca\xbc\x53\xaa\x3b\x0c\xff\x4d\xa3\xbd\xf5\xa8\x68\xef\x77\xaa\xf9\x2b\xa1\x51\x41\xf7\x0c\x52\xcc\x44\xad\x16\x0d\xbf\x30\xef\xe6\x83\xd4\xf9\x51\xc5\x8b\xab\x43\xdb\x6e\x90\x7b\x55\xfb\x8c\x56\x3f\x8a\x12\xe7\x8a\x3d\xbd\x5c\x3d\xc6\x9e\xf8\xac\x72\x8b\xf5\xd3\xcd\xca\x8b\xab\x45\x97\x1e\x6e\xc6\xe3\xdc\xfd\xfc\x67\x47\xbb\x61\x08\x7e\x87\x2e\xb1\xb2\x22\x69\xf4\xb2\x33\x9e\x12\x21\x33\x86\x96\xd3\xb7\xb3\x1d\x8f\x89\x5d\xb0\x77\x52\x3f\xb6\x2d\x03\x12\x36\xf7\x87\xfc\xef\xb1\x12\xfa\x71\x22\x45\x6f\xe0\x4f\x90\xf3\xa9\x9c\x9c\x44\xe7\x46\x53\x9f\xe9\xc1\x94\x4e\x50\x1f\x49\x3e\xac\xa2\x1f\x44\x8a\xf0\xa7\xa4\x02\xc2\xc4\xa4\x18\x85\x57\x21\xef\x5e\x20\xde\xee\x89\xf9\xbb\x87\xbb\xe1\x3c\x97\x54\xd4\xf1\x2a\x31\x25\xff\x82\xce\x65\x56\xfc\xcd\xa2\x6f\xc6\xd7\xfe\x40\xac\x96\x41\x6e\x0b\x4c\x1e\x4d\x4d\x40\x05\x82\x33\xb5\x4d\x10\x7c\x10\x10\x74\x73\x36\x48\x8e\xba\x96\x1a\xc9\x18\xe5\xb8\xc5\x9c\x45\x67\x16\x97\xe1\x43\xde\x4b\x31\x5e\x0c\x06\x31\x43\x3e\xdc\x16\x42\x3e\xdc\x5a\x77\x2a\xfe\x13\x00\x00\xff\xff\x5d\xde\xcb\x3d\xe4\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/repositories.html"].(os.FileInfo),
		fs["/tags.html"].(os.FileInfo),
		fs["/vulns.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
