// Code generated by vfsgen; DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 7, 12, 7, 15, 4, 66649451, time.UTC),
		},
		"/repositories.html": &vfsgen۰CompressedFileInfo{
			name:             "repositories.html",
			modTime:          time.Date(2020, 7, 12, 7, 13, 26, 657283712, time.UTC),
			uncompressedSize: 1900,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4b\x6f\xdc\x36\x10\xbe\xef\xaf\x18\x13\x39\x46\x22\x8c\x1e\xe2\x2e\x28\xa1\x85\xe3\x83\x81\x3e\x02\xa3\x06\x5a\x04\x39\x70\xa9\x91\x44\x9b\x22\x15\x72\xb4\xc1\x56\xd5\x7f\x2f\xa8\x47\xf7\x69\xc3\x3d\x44\x17\x8a\xdf\x7c\xf3\x71\x1e\xd4\xa8\xef\x0b\x2c\xb5\x45\x60\x1e\x5b\x17\x34\x39\xaf\x31\xb0\x61\x58\x89\xab\x8f\xbf\xdf\xfe\xf1\xd7\xa7\x3b\xa8\xa9\x31\xf9\x4a\x5c\x25\xc9\x67\x5d\x82\x21\xb8\xbf\x83\x0f\x5f\x72\x18\x1f\x11\xad\xa0\x8c\x0c\x21\x63\xd6\x25\x4f\x01\x0c\x25\x1a\x7f\x9c\x96\x9b\x69\xf9\xc0\x72\x10\x57\x9f\xd1\x16\xba\xfc\x92\x24\x7b\xb5\x43\xa9\x37\xa8\xbd\x22\x73\xf3\x16\x99\x97\xfc\x2b\x9a\x25\x22\x90\x5f\xf0\x1f\x1d\x93\xe4\xd8\xb9\x46\x59\xe4\xab\xf1\xc0\x06\x49\x82\xaa\xa5\x0f\x48\x19\xeb\xa8\x4c\x6e\xd8\x6c\xda\xc8\x80\x50\x7b\x2c\x33\xc6\x19\x1c\xf2\x6b\xa2\x36\xc1\xaf\x9d\xde\x66\xec\xcf\xe4\xf1\xe7\xe4\xd6\x35\xad\x24\xbd\x31\xc8\x40\x39\x4b\x68\x29\x63\xf7\x77\x19\x16\x15\xbe\x57\xb5\x77\x0d\x66\xd7\x8b\x2e\x69\x32\x98\xf7\x3d\xa4\x0f\x58\xe9\x40\x7e\xf7\xd1\x35\x52\x5b\x18\x06\xc1\x27\xe3\x44\x34\xda\x3e\x83\x47\x93\x31\xad\x9c\x65\x40\xbb\x16\x33\xa6\x1b\x59\x21\xd7\xca\xb1\x25\xb8\x40\x92\xb4\xe2\xa5\xdc\x46\x5e\x1a\x4d\x67\x0a\x81\x76\x06\x43\x8d\x48\x8b\xdb\xec\xa5\x42\xe0\x93\x31\x55\x21\x30\xe0\xf9\x4a\xf0\xa9\x40\x62\xe3\x8a\xdd\xac\x54\x5f\xbf\x14\x71\x7d\x3d\x53\x4a\xe7\x9b\xe9\x75\xdc\x6a\xdb\x76\x04\x56\x36\x98\xb1\x52\x1b\x42\xbf\x64\x10\x50\x7a\x55\xb3\x5c\xc8\xa5\x55\xca\xa0\xf4\x2c\x1f\x17\xc1\xe5\x2c\xc8\x27\xc5\x69\x53\xe8\xed\xc2\xfe\xe6\x65\xdb\xa2\x67\x07\x87\x91\xdc\x2c\x65\xdb\x63\xfe\x18\x98\xc0\x3a\x7f\x58\x3e\x98\x1d\xfc\x26\x1b\x14\x9c\xea\xcb\xc4\x4f\x9d\x31\x70\xeb\x9a\x46\xda\xe2\x9c\x25\xf8\xe9\x01\x7d\x0f\x5e\xda\x0a\xe1\xdd\x33\xee\xde\xc3\xbb\xad\x34\x1d\xc2\x3a\x8b\x65\xdb\x7f\xa3\x30\x0c\x6f\x89\xb3\x80\xad\x34\xba\xb2\x19\x23\xd7\xb2\x73\xc6\xc8\x92\x73\x2f\xe3\x0c\xe0\x7d\x3f\x1f\x99\xc6\xb4\xe0\x1f\xe8\xbc\xf9\xda\xa1\xdf\xc1\x30\x70\x92\x55\x78\x41\xe5\xc4\xef\x24\xbc\x7d\xba\xf2\x42\x98\x9c\x8a\xb9\x41\xa7\xd1\xcf\xc1\x7b\x5d\xd5\xc4\xc0\xba\xd8\xb4\xef\x99\x85\x50\xae\xc0\xbc\x70\xea\x19\x3d\xb4\xb1\x73\x7b\xa5\xc7\x87\xfb\xf1\xaa\x8e\x94\xff\x9b\xdd\x09\x72\xde\x73\xb4\xc5\x61\xd1\x04\x3f\xb8\x8c\x82\x17\x7a\x7b\xe1\x0a\x97\xce\xd1\xf1\x0d\x6e\xf3\x5f\x65\x81\xf0\x4d\x53\x3d\xe7\x22\x7e\x98\x23\x86\xcd\x6e\x5f\xa4\x38\x7b\xc2\x9a\xf3\x4a\x53\xdd\x6d\x52\xe5\x1a\xfe\x84\x21\x94\x5e\xfe\xcd\xf2\x9f\x96\xd7\x98\x8f\xe0\xed\x91\xfe\x6d\x8d\xea\xd9\x75\x04\x54\x23\x04\xd7\x79\x85\x10\xf5\x41\xd2\xfa\x55\xfd\x0a\x6d\xa7\x2d\x92\x73\x26\x70\x8f\x15\xcb\x5f\x31\x5e\x3a\xf9\x17\x19\x08\x1e\xdb\x42\x12\x16\xeb\x58\xb2\x34\x22\x33\x30\x76\xe6\x98\x3f\x59\xe0\xde\x12\xfa\xad\x34\xeb\xb1\xcc\xe9\x84\x2e\xe0\xa1\xdb\x54\xe5\x38\xe7\x79\x3a\x55\x36\x8e\xf9\xd1\x12\x94\xd7\x2d\x41\xf0\xea\xbf\x89\xf7\x14\xf8\x84\x86\x34\xfe\x1f\xc4\xbc\x8b\x73\x6f\x1a\x78\x82\x4f\x7f\xce\xbe\x47\x5b\x0c\xc3\xea\xdf\x00\x00\x00\xff\xff\x79\x73\x6b\xe2\x6c\x07\x00\x00"),
		},
		"/tags.html": &vfsgen۰CompressedFileInfo{
			name:             "tags.html",
			modTime:          time.Date(2020, 3, 3, 23, 19, 0, 41839787, time.UTC),
			uncompressedSize: 2868,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\x25\x0a\xb4\x05\x2c\x31\xe9\xd6\xb5\x73\x24\x61\x85\x9b\x61\x1d\xf6\x0b\x43\x32\x6c\x08\xf2\x40\x4b\x27\x89\x0e\x4d\xaa\xe4\xc9\x89\xa7\xe9\x7f\x1f\x68\xc9\x8e\xec\xd8\x41\x86\xee\xa1\x7e\x11\x7d\x3f\x3e\x7d\xf7\x9d\xc8\x63\xd3\x64\x98\x4b\x8d\xc0\x48\x14\x8e\xb5\xed\x28\x7a\xf6\xe1\xd7\xe9\xc5\x5f\xbf\x9d\x43\x49\x0b\x95\x8c\xa2\x67\x41\x70\x25\x73\x50\x04\x1f\xcf\xe1\xed\x75\x02\xeb\x5f\xe4\xbd\x90\x2a\xe1\x5c\xcc\xb4\x09\xe6\x0e\x14\x05\x12\xbf\xed\x1e\xef\xba\xc7\x5b\x96\x40\xf4\xec\x0a\x75\x26\xf3\xeb\x20\xb8\x47\x1b\x42\x3d\x01\xed\x11\x98\x77\x4f\x81\x39\x96\x5f\x50\x0f\xe1\x0d\xc9\x81\xfc\x75\x62\x10\xec\x26\x97\x28\xb2\x64\xb4\x7e\xe1\x02\x49\x40\x5a\x0a\xeb\x90\x62\x56\x53\x1e\xbc\x63\xbd\x6b\x26\x1c\x42\x69\x31\x8f\x19\x67\x30\x8c\x2f\x89\xaa\x00\x3f\xd5\x72\x19\xb3\x3f\x83\xcb\xf7\xc1\xd4\x2c\x2a\x41\x72\xa6\x90\x41\x6a\x34\xa1\xa6\x98\x7d\x3c\x8f\x31\x2b\x70\x9c\x96\xd6\x2c\x30\x3e\xdd\xe0\x92\x24\x85\x49\xd3\x40\xf8\x3b\x16\xd2\x91\x5d\x7d\x30\x0b\x21\x35\xb4\x2d\xf7\xd6\x5f\xc4\x02\xa1\x6d\x23\xde\x05\x76\x49\x4a\xea\x1b\xb0\xa8\x62\x26\x53\xa3\x19\xd0\xaa\xc2\x98\xc9\x85\x28\x90\xcb\xd4\xb0\x0d\x51\x47\x82\x64\xca\x73\xb1\xf4\x71\xa1\x77\x3d\x40\x70\xb4\x52\xe8\x4a\x44\xda\x4f\x4b\x9d\xe3\x9d\x37\x4c\x9d\x63\xc0\x93\x51\xc4\x3b\xb5\xa2\x99\xc9\x56\x3d\x54\x79\xfa\x14\xfa\xe5\x69\x1f\x9e\xc9\xe5\xa6\x27\xb7\x56\x54\x15\xda\x9e\x53\x27\x87\x98\x6d\xaa\xbc\xb7\xd9\x5d\x43\x67\x2c\x13\x8f\x1d\x71\x2a\x0f\x7b\x2f\x44\x71\xdc\x39\xb5\x28\x08\xb3\xc3\x01\x4d\x23\x73\x08\x7f\x10\xee\x8f\x5a\x69\xd7\xb6\x3e\xc1\x2f\xd1\x8a\x99\x54\x92\x24\xba\x75\x62\xd3\xa0\xce\xda\x76\x97\x2c\xdf\x67\xdb\x34\x60\x85\x2e\x10\x9e\xdf\xe0\x6a\x0c\xcf\x97\x42\xd5\x08\x93\xd8\x2b\x56\x19\x27\xc9\x58\x89\x0e\xf6\x71\x0e\x17\x9d\xc1\x52\x28\x59\xe8\x98\x29\xcc\x89\x81\x36\x5e\xc3\x87\x91\xdb\x32\x9e\x0f\xeb\x10\x9b\x06\x5b\xac\x8c\x6f\x4f\x47\xa6\x6b\xd2\x3f\x50\x5b\xf5\xa9\x46\xbb\xf2\xbd\x23\x51\x0c\x02\x2e\x44\xe1\x8d\x4b\x8f\xc3\x0e\xd6\x3d\xa8\x76\x08\x7a\x34\x6a\x9f\x1a\x17\x47\x61\x23\x4e\xd9\x61\x2d\x7a\x29\xac\x2c\xca\x2f\x5b\x8b\x2e\xe7\x4b\x91\x62\xc3\xaa\xdf\x04\xe1\xf7\xc6\x2e\x04\x01\x3b\x79\x0d\x3f\x0a\x3d\x86\xd7\x27\x27\xdf\xc0\xe9\x9b\xc9\xc9\xd7\x93\x93\x37\x70\x79\x31\x65\x87\xc8\x1f\xe6\xf2\xa0\x9c\xcf\x64\xfb\x3f\xf5\x09\x64\x16\xb3\x07\xdf\xe6\x64\x3f\x9a\x1d\x26\xb1\x7b\x6a\x39\x59\x68\xa1\x58\x12\xf1\x4c\x2e\x8f\xb0\xe6\xe2\x40\x9b\x8e\x08\xf6\xc4\x43\x04\x75\x36\x6c\x43\xc4\x07\x47\x65\x4f\xe5\xc1\x01\x9b\x1b\x43\xbb\xe7\x6b\x95\xfc\x2c\x32\x84\x5b\x49\x25\x44\xa9\xc9\x30\x89\xbe\x8a\xf8\x7a\x01\xb3\xd5\xbd\xdc\x7e\xa8\xb9\x09\xe7\x85\xa4\xb2\x9e\x85\xa9\x59\xf0\x39\x3a\x97\x5b\xf1\x37\x4b\xbe\xdb\x2c\x7d\x9d\x11\xaf\x76\xf0\xa7\x25\xa6\x37\xa6\x26\xa0\x12\xc1\x99\xda\xa6\x08\x1e\x1f\x04\x4d\x1e\xc5\x2f\x50\xd7\x52\x23\x19\xa3\x1c\xb7\x58\xb0\xe4\x11\xe7\xa1\x37\xff\x24\x1c\xc1\x65\x95\xf9\x8f\x7a\xe2\x25\x0b\xbd\xa5\x37\xac\x87\x50\x35\x94\xcb\xdf\x04\x78\xd8\x49\xe4\x2f\x02\x6b\x8f\x4b\xad\xac\x08\x9c\x4d\xef\xe7\xe0\xdc\xf1\xce\xec\x42\x7f\x85\x88\xfa\x7f\x5d\xc6\xfe\xb0\xd8\x81\xe9\xe6\x32\xe1\x1d\xf1\xb9\x58\x8a\xce\xba\x6d\xc7\x52\x58\x10\x73\x71\x37\x15\x4a\x39\x88\xe1\x6a\x34\x68\xf7\x7f\x9e\x19\x2f\x3e\x6b\x87\x84\x73\x67\xf4\x8b\xf1\xe8\xd8\x07\x77\x7d\xd6\x2f\x6e\xa5\xce\xcc\x6d\x68\xb4\x32\x22\x83\x18\xf2\x5a\xa7\x24\x8d\x7e\xf9\x0a\x9a\x6d\xf6\x7b\x6b\xc5\x2a\xac\xac\x21\xe3\x25\x08\x73\x63\xcf\x45\x5a\x86\xa9\x50\xea\xe5\xb6\xe4\xf1\x7d\x72\x6d\xd5\x18\xa4\xce\xf0\xee\x55\x33\xa8\xc9\xbf\x63\x38\x79\x57\x53\x53\x6b\xf2\xd1\xaf\xce\xb6\x61\xed\x76\xdd\x9e\xf5\xed\xdd\x6d\x50\xb7\xc1\x22\xde\xdd\x59\x22\xde\xdd\x84\x37\xf6\x7f\x03\x00\x00\xff\xff\x88\x1c\x69\x6a\x34\x0b\x00\x00"),
		},
		"/vulns.html": &vfsgen۰CompressedFileInfo{
			name:             "vulns.html",
			modTime:          time.Date(2020, 7, 12, 7, 15, 4, 66649451, time.UTC),
			uncompressedSize: 2774,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x6f\x6f\xdb\xb6\x13\x7e\x9f\x4f\x71\x21\xfa\x32\x32\x91\x04\x3f\x34\xbf\x80\x16\xb6\x26\xc1\x56\xa0\xfb\x83\x36\x1d\x36\x14\xc5\x40\x49\x67\x89\x0d\x45\x6a\xe4\xc9\x9b\x27\xe8\xbb\x0f\x12\x2d\x5b\x96\xec\x2c\xc5\xfc\x42\x96\x7c\x77\xcf\xdd\xf3\xdc\xe9\xe8\xa6\xc9\x70\xa5\x0c\x02\x5b\xd7\xda\x78\xd6\xb6\x67\xe2\xfc\xfe\xa7\xbb\xc7\xdf\x7e\x7e\x80\x82\x4a\x1d\x9f\x89\xf3\x28\xfa\xa4\x56\xa0\x09\xde\x3e\xc0\xeb\xcf\x31\xf4\x1f\xd1\x59\x21\xd5\xd2\xfb\x25\x33\x36\xfa\xe2\x41\x53\xa4\xf0\xff\xe1\xeb\x26\x7c\xbd\x66\x31\x88\xf3\x4f\x68\x32\xb5\xfa\x1c\x45\x7b\xb4\x31\xd4\x0b\xd0\x9e\x81\xb9\x79\x09\xcc\xa9\xf8\x9c\xb6\x10\xdd\x0f\xf1\x91\xf8\x3e\x30\x8a\x0e\x83\x0b\x94\x59\x7c\xd6\x27\x2c\x91\x24\xa4\x85\x74\x1e\x69\xc9\x6a\x5a\x45\x37\x6c\x6b\x4a\xa4\x47\x28\x1c\xae\x96\x8c\x33\x18\xfb\x17\x44\x55\x84\x7f\xd4\x6a\xbd\x64\xbf\x46\x1f\xbf\x8d\xee\x6c\x59\x49\x52\x89\x46\x06\xa9\x35\x84\x86\x96\xec\xed\xc3\x12\xb3\x1c\x2f\xd2\xc2\xd9\x12\x97\x97\x03\x2e\x29\xd2\x18\x37\x0d\x2c\xde\x63\xae\x3c\xb9\xcd\xc7\xf7\xef\xa0\x6d\x79\xf8\xa9\xb2\xd0\xb6\xb7\xdd\xfd\xa3\xcc\xa1\x6d\xe1\x97\x5a\x1b\x74\x32\x51\x5a\xd1\x06\x3a\x07\x47\x82\x07\x94\x80\xa8\x95\x79\x02\x87\x7a\xc9\x54\x6a\x0d\x03\xda\x54\xb8\x64\xaa\x94\x39\x72\x95\x5a\x36\xb0\xf0\x24\x49\xa5\x7c\x25\xd7\x9d\xdf\xa2\x33\xcd\x10\x3c\x6d\x34\xfa\x02\x91\xa6\x61\xa9\xf7\x3c\xb1\x96\x3c\x39\x59\x2d\x4a\x65\x16\xa9\xf7\x0c\xf8\x57\x42\xf4\x83\xba\x0b\x15\x3c\x34\x43\x24\x36\xdb\x6c\x91\x32\xb5\x1e\x7a\xd8\x89\x29\x95\x41\xb7\x2d\xb4\xb7\xdb\x5d\x8b\x13\x87\x32\x4b\x5d\x5d\x26\x23\xfb\xb6\x9a\x58\xc8\x5d\xf7\x8e\xa8\x2d\xb8\x8c\x05\xd7\x6a\x16\x37\x60\xcb\x94\xd4\x1a\x87\xd0\x69\x57\x0e\x43\x05\xb7\x3a\x3e\xdb\x3f\x8e\x18\x54\x32\xc7\xa8\xe3\x78\xc0\x21\x0c\xfb\xe5\x57\x4c\x81\xf0\xa5\xd4\x3a\x3e\x3e\x0c\xc1\x26\x78\x71\x39\xae\x29\x53\xeb\xd1\x63\x35\x54\x44\xf8\x17\x45\x4e\xe5\x05\xb1\xf8\x3b\xec\xd0\x08\x33\xb0\xe6\x16\x9a\x66\x71\x2f\x09\x3b\x76\xd5\x88\x4e\xd3\x84\x37\x6d\xf1\x46\x66\x5d\x7e\x0f\xff\x6b\xdb\xa3\x64\xa5\x46\x47\xd0\x5f\xa3\x4c\x9a\x1c\x1d\x03\x67\x35\x6e\x2d\x13\x01\x9a\x66\x87\xd8\xb6\xf0\xbd\xca\x8b\x0b\xb8\x73\x8a\x54\x2a\xf5\x05\x48\x93\x71\xeb\xe0\x1e\x57\xa9\x35\x97\xb0\x1e\x11\x57\xe8\x61\x65\x6b\x93\x9d\x22\xdb\x34\x68\xb2\xb6\x1d\x75\xa4\xb8\x8a\x3f\xd4\x65\x29\xdd\x46\xf0\xe2\x6a\x24\x4b\xbd\x1b\x26\xad\x3c\x45\xb9\xb3\x75\x35\x1f\xa6\xb9\x4f\xa4\x08\xcb\x89\x63\xef\xec\x2b\x69\x76\xf3\x29\xb3\x3c\x8c\x90\x46\x03\x8b\x20\x5e\x27\x6f\xe7\x74\x24\x36\x89\x1f\x2d\x49\x2d\x78\x32\xa9\x60\x36\xa8\x4d\xe3\x3a\x7d\xe1\xd5\x13\x6e\x2e\xe0\xd5\x5a\xea\x1a\xe1\x76\xb9\xcd\xf1\x66\xf3\x01\xd7\xe8\x14\x6d\x46\x8d\xfa\x6f\x54\xb4\x4c\x50\x43\x7f\x8d\x9a\x26\xb5\xda\xba\x3e\x79\xdb\x42\x55\x6b\x3d\x0c\xd4\x96\xea\xb6\xa0\xd3\x54\x9b\xa6\x8f\x86\x69\x7d\x47\x88\x86\x56\xee\x3d\xea\x83\x57\xad\xb8\x8a\xef\x91\xa4\xd2\xfe\xb0\xb1\x3b\x81\xfa\x7d\xf3\x2f\xd2\xec\x9d\x07\x1d\x43\xd8\x89\x31\xaf\xa4\x41\x0d\xfd\x35\xca\x70\x25\x6b\x3d\x1d\xed\x99\x77\xbf\x02\x94\xc9\x8f\xc9\x5c\x5c\x1f\xba\xf6\xab\xbd\x93\x32\x94\xb3\xf8\x51\x96\x38\xd1\xe9\xe5\x2d\x0a\x10\x7b\xce\x93\x6e\xcd\xec\x27\x67\x93\x17\xd7\xd3\xa1\x3c\x78\xe7\x8e\xd3\xee\xd6\xfa\x11\xce\xbb\xc4\xf7\xe8\x53\xa7\x2a\x52\xd6\xcc\x46\xe1\x05\xf0\x2b\x6b\x69\xb6\x58\x7b\xd7\x61\xf9\xef\x32\xbd\x53\xe6\xa9\x6d\x19\x90\x74\x79\x77\xd6\xff\x9e\x68\x69\x9e\x46\x1a\x04\x87\xee\x5c\x78\xae\x8e\x13\x9b\x66\xfa\xbc\xf7\x0f\x25\x1e\x2c\xdf\x14\xcd\xbc\x6a\x51\xc5\x3f\xc8\x0c\xe1\x4f\x45\x05\x88\xd4\x66\x18\x8b\x6b\xc1\xfb\x1b\x48\x36\x7b\x46\xdd\xbf\x0f\x7f\xcb\x79\xae\xa8\xa8\x93\x45\x6a\x4b\xfe\x05\xbd\x5f\x39\xf9\x37\x8b\xbf\x19\x6e\xc3\xf9\x56\xcd\x72\xdc\x15\x98\x3e\xd9\x9a\x80\x0a\x04\x6f\x6b\x97\x22\x74\x39\x40\xd2\xed\xb3\x39\x72\x34\xb5\x32\x48\xd6\x6a\xcf\x1d\xe6\x2c\x7e\xc6\x38\xcb\x2e\x78\xd0\x61\x7b\xc4\x07\x11\x05\x0f\xa7\xbe\xe0\xe1\xaf\xea\x20\xde\x3f\x01\x00\x00\xff\xff\x0b\x47\x76\x1e\xd6\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/repositories.html"].(os.FileInfo),
		fs["/tags.html"].(os.FileInfo),
		fs["/vulns.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
