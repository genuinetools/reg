// Code generated by vfsgen; DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 11, 5, 11, 18, 2, 584515532, time.UTC),
		},
		"/repositories.html": &vfsgen۰CompressedFileInfo{
			name:             "repositories.html",
			modTime:          time.Date(2020, 11, 5, 11, 17, 13, 630200821, time.UTC),
			uncompressedSize: 2009,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xbc\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x4c\x88\x1c\x57\x26\x82\x1e\x36\x35\x28\xa1\x45\x36\x87\x00\xfd\x08\x82\x06\x68\xb1\xd8\x03\x2d\x8d\x44\x26\x14\xa9\x25\x47\xde\xba\xae\xfe\x7b\x41\x51\x86\x65\xc7\xc9\x6e\x2f\xab\x0b\xc5\x99\x37\x8f\x7c\x8f\x5f\xbb\x5d\x85\xb5\xb6\x08\xcc\x63\xe7\x82\x26\xe7\x35\x06\x36\x0c\x0b\x71\xf1\xe1\xf7\x9b\x3f\xfe\xba\xbf\x05\x45\xad\x29\x16\xe2\x22\xcb\x3e\xea\x1a\x0c\xc1\xdd\x2d\xbc\xff\x54\xc0\xf8\x89\x98\x85\xd2\xc8\x10\x72\x66\x5d\xf6\x14\xc0\x50\xa6\xf1\xc7\xd4\x5c\xa7\xe6\x3d\x2b\x40\x5c\x7c\x44\x5b\xe9\xfa\x53\x96\x1d\xd8\xe6\x54\xdf\xc0\xf6\x06\xcd\xf5\xb7\xd0\xbc\x56\xdf\xd0\x44\x11\x03\xc5\x99\xfa\xb1\x30\xcb\x8e\x8b\x15\xca\xaa\x58\x8c\x03\xb6\x48\x12\x4a\x25\x7d\x40\xca\x59\x4f\x75\x76\xcd\xe6\x29\x45\xd4\x65\xf8\xb9\xd7\x9b\x9c\xfd\x99\x3d\xfe\x9c\xdd\xb8\xb6\x93\xa4\xd7\x06\x19\x94\xce\x12\x5a\xca\xd9\xdd\x6d\x8e\x55\x83\xef\x4a\xe5\x5d\x8b\xf9\xd5\x9e\x82\x34\x19\x2c\x76\x3b\x58\x3e\x60\xa3\x03\xf9\xed\x07\xd7\x4a\x6d\x61\x18\x04\x4f\xc9\x04\x34\xda\x3e\x83\x47\x93\x33\x5d\x3a\xcb\x80\xb6\x1d\xe6\x4c\xb7\xb2\x41\xae\x4b\xc7\x40\x79\xac\x73\x16\x99\xee\x25\xa9\x7b\x8f\xb5\xfe\x1b\x86\x81\x07\x92\xa4\x4b\x5e\xcb\x4d\x2c\x5c\x46\xec\x0b\xca\x40\x5b\x83\x41\x21\xd2\x57\x79\xca\x10\x78\x82\x2f\xcb\x10\x18\xf0\x62\x21\x78\xb2\x4b\xac\x5d\xb5\x9d\xb8\xd5\xd5\x6b\xa2\xd4\xd5\x04\xa9\x9d\x6f\xd3\xef\xd8\xd5\xb6\xeb\x09\xac\x6c\x31\x67\xb5\x36\x84\x7e\x2f\x32\xa0\xf4\xa5\x62\x85\x90\xfb\x85\x2b\x0d\x4a\xcf\x8a\xb1\x11\x5c\x4e\x84\x3c\x31\xa6\x4e\xa5\x37\x7b\xf4\x17\x2f\xbb\x0e\x3d\x9b\x0d\x46\x72\xbd\x77\xf6\x10\xf3\xc7\x81\x14\x54\xc5\xc3\xfe\xf8\x6c\xe1\x37\xd9\xa2\xe0\xa4\xce\x03\xef\x7b\x63\xe0\xc6\xb5\xad\xb4\xd5\x4b\x94\xe0\xa7\x03\xec\x76\x70\xd9\x49\x52\x5d\xf2\x78\x95\x9f\x58\x7e\x0a\xf6\xd2\x36\x08\x97\xcf\xb8\x7d\x07\x97\x1b\x69\x7a\x1c\x6b\x1e\x66\xc7\xfb\xb4\xea\x15\x51\x15\x6c\xa4\xd1\x8d\xcd\x19\xb9\x8e\xbd\x44\x00\x08\x79\xd8\x08\xf3\x49\x0e\x03\x8f\xd7\x09\x8f\xe1\x71\x0a\xcb\xe8\x09\xfc\x0b\xbd\x37\x9f\x7b\xf4\xdb\x88\x20\xd9\x84\xb3\xac\x49\xf3\xac\xee\x64\xba\x07\xaf\xe4\x99\x69\x73\xaa\xa6\xd5\x3d\x55\x33\x89\xf1\xba\x51\xc4\xc0\xba\xb8\xe2\xdf\x53\x95\x28\x5d\x85\x45\xe5\xca\x67\xf4\xd0\xc5\x6d\x70\x60\x7a\x7c\xb8\x1b\xf7\xfd\x08\xf9\xbf\x6a\xbf\xba\x81\xd0\x56\x73\x13\x05\x9f\xed\x6c\xc1\x2b\xbd\x39\x73\x1e\x6a\xe7\xe8\xf8\x38\x74\xc5\xaf\xb2\x42\xf8\xa2\x49\x4d\x5a\xc4\x0f\xd3\x8c\x61\xbd\x3d\xd8\x16\xef\xba\xb0\xe2\xbc\xd1\xa4\xfa\xf5\xb2\x74\x2d\x7f\xc2\x10\x6a\x2f\xff\x61\xc5\x4f\xfb\xdf\xa8\x47\xf0\xee\x88\xff\x46\x61\xf9\xec\x7a\x02\x52\x08\xc1\xf5\xbe\x44\x88\xfc\x20\x69\xf5\x26\x7f\x83\xb6\xd7\x16\xc9\x39\x13\xb8\xc7\x86\x15\x6f\x24\xcf\x8d\xfc\x8b\x0c\x04\x8f\x5d\x25\x09\xab\x55\xb4\x6c\x19\x23\x53\x60\x5c\x99\x63\x7c\xca\xc0\x9d\x25\xf4\x1b\x69\x56\xa3\xcd\xcb\x14\xdd\x07\xe7\x65\xc9\xe5\xf8\x84\xf0\x65\x72\x36\xbe\x20\x63\x26\x94\x5e\x77\x04\xc1\x97\x6f\x5c\xa8\x4f\x81\x27\x5c\x58\xc6\xc7\x48\x4c\xbd\x78\xad\xa6\xfb\x54\xf0\xf4\x4c\xef\x76\x68\xab\x61\x58\xfc\x17\x00\x00\xff\xff\x86\x32\xc1\x82\xd9\x07\x00\x00"),
		},
		"/tags.html": &vfsgen۰CompressedFileInfo{
			name:             "tags.html",
			modTime:          time.Date(2020, 11, 5, 11, 17, 47, 990421711, time.UTC),
			uncompressedSize: 3003,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd4\x56\x6d\x6f\xdb\x36\x17\xfd\xee\x5f\x71\x4b\x04\x68\x0b\x58\x62\xd2\xe7\xe9\xda\xb9\x92\xb0\xc2\xcd\xb0\x0e\x7b\x09\x8a\x64\xd8\x10\xe4\x03\x2d\x5d\x49\x74\x68\x52\x25\xaf\x9c\x78\x9a\xfe\xfb\x40\x4b\x49\x64\xc7\xce\x8c\x15\x03\x36\x7f\x11\x7d\x79\xce\xe1\xe5\xb9\x7c\x6b\x9a\x0c\x73\xa9\x11\x18\x89\xc2\xb1\xb6\x1d\x45\xcf\x3e\xfc\x3c\x3d\xff\xed\xec\x14\x4a\x5a\xa8\x64\x14\x3d\x0b\x82\x4b\x99\x83\x22\xf8\x78\x0a\x6f\xae\x12\x58\xff\x22\xdf\x0b\xa9\x12\xce\xc5\x4c\x9b\x60\xee\x40\x51\x20\xf1\xeb\xee\xf3\xb6\xfb\xbc\x61\x09\x44\xcf\x2e\x51\x67\x32\xbf\x0a\x82\x07\xb5\xa1\xd4\x01\x6a\x4f\xc8\xbc\x3d\x44\x66\x1f\xbf\xa0\x5e\xc2\x07\x92\x1d\xfc\x35\x31\x08\x36\xc9\x25\x8a\x2c\x19\xad\x07\x5c\x20\x09\x48\x4b\x61\x1d\x52\xcc\x6a\xca\x83\xb7\x6c\xd8\x55\x12\x55\x01\x7e\xae\xe5\x32\x66\xbf\x06\x17\xef\x83\xa9\x59\x54\x82\xe4\x4c\x21\x83\xd4\x68\x42\x4d\x31\xfb\x78\x1a\x63\x56\xe0\x38\x2d\xad\x59\x60\x7c\x72\x27\x41\x92\x14\x26\x4d\x03\xe1\x27\x2c\xa4\x23\xbb\xfa\x60\x16\x42\x6a\x68\x5b\xee\xa3\x3f\x89\x05\x42\xdb\x46\xbc\x03\x76\x24\x25\xf5\x35\x58\x54\x31\x93\xa9\xd1\x0c\x68\x55\x61\xcc\xe4\x42\x14\xc8\x65\x6a\x18\x94\x16\xf3\x98\x79\xfe\x99\xa0\xf2\xcc\x62\x2e\x6f\xbd\xa2\x23\x41\x32\xe5\xb9\x58\x7a\x62\xe8\xb1\x8f\x24\x1d\xad\x14\xba\x12\x91\xfe\x52\x27\x75\x8e\x77\xf0\x30\x75\x8e\x01\x4f\x46\x11\xef\xac\x8b\x66\x26\x5b\xf5\xda\xe5\xc9\x21\x13\x2c\x4f\x7a\x78\x26\x97\x77\x05\xba\xb1\xa2\xaa\xd0\xf6\x49\x76\x86\x89\xd9\x9d\x0f\x0f\x31\xbb\x19\xe8\x82\x65\xe2\xb5\x23\x4e\xe5\xee\xde\x73\x51\xec\xef\x9c\x5a\x14\x84\xd9\x6e\x40\xd3\xc8\x1c\xc2\xef\x84\xfb\xa5\x56\xda\xb5\xad\x27\xf8\x26\x5a\x31\x93\x4a\x92\x44\xb7\x26\x36\x0d\xea\xac\x6d\x37\x93\xe5\xdb\xd9\x36\x0d\x1c\x55\x82\xca\xaa\xb3\x77\x12\x6f\xb9\xbd\x0d\xb6\x42\x17\x08\x47\xd7\xb8\x1a\xc3\xd1\x52\xa8\x1a\xd7\x9c\x4f\x58\x19\x27\xc9\x58\x89\x6e\x9b\xb5\xc7\xa1\x0c\x96\x42\xc9\x42\xc7\x4c\x61\x4e\x0c\xb4\xf1\x86\x3f\x46\xf6\x33\x3e\x1a\x4e\x59\x3c\x2c\x8e\x61\xf6\x6d\xcb\x2d\x56\xc6\x97\xb6\xcb\xad\x2b\xf0\x1f\x50\x5b\xf5\xb9\x46\xbb\xf2\x08\x12\xc5\x00\x70\x2e\x0a\x1f\x5c\x7a\x61\xb6\xd3\xb3\xa1\x53\x03\xd1\xbd\xa8\xed\x5c\xb9\xd8\x2b\x1b\x71\xca\x76\x5b\xd3\x3b\x63\x65\x51\xfe\xa7\xac\xe9\x38\xff\x06\x67\x86\x59\xf5\xfb\x29\xfc\xd6\xd8\x85\x20\x60\xc7\xaf\xe0\x7b\xa1\xc7\xf0\xea\xf8\xf8\x2b\x38\x79\x3d\x39\xfe\xff\xe4\xf8\x35\x5c\x9c\x4f\x19\x1c\x9c\xcb\xa3\xe9\x7c\x51\xb6\xff\x54\xd9\x40\x66\x9d\xe6\xc6\xca\x9d\x6c\xa3\xd9\x6e\x07\x37\xcf\x43\x27\x0b\x2d\x14\x4b\x22\x9e\xc9\xe5\x6e\x82\x2f\xe9\xc1\xfe\x1d\x78\x3c\xa1\xce\x86\x55\x89\xf8\xe0\x10\xee\x53\x79\x74\x74\xe7\xc6\xd0\xe6\xc9\x5d\x25\x3f\x8a\x0c\xe1\x46\x52\x09\x51\x6a\x32\x4c\xa2\xff\x45\x7c\xdd\x80\xd9\xea\xc1\x7f\x7f\xa1\xba\x09\xe7\x85\xa4\xb2\x9e\x85\xa9\x59\xf0\x39\x3a\x97\x5b\xf1\x3b\x4b\xbe\xb9\x6b\xfa\x79\x46\xbc\xda\xd0\x9f\x96\x98\x5e\x9b\x9a\x80\x4a\x04\x67\x6a\x9b\x22\x78\x7d\x10\x34\x79\x52\xbf\x40\x5d\x4b\x8d\x64\x8c\x72\xdc\x62\xc1\x92\x27\x3a\x77\x8d\xfc\x83\x70\x04\x17\x55\xe6\xd7\xf8\xc4\x5b\x16\xfa\x48\x1f\x58\x5f\x6f\xd5\xd0\x2e\xff\xe0\xe0\x61\x67\x91\x7f\x6f\xac\x7b\x5c\x6a\x65\x45\xe0\x6c\xfa\xc4\x95\x3b\x77\xbc\xc3\xb9\xd0\x3f\x5d\xa2\xfe\x5f\x27\xb1\x7d\x2f\x6d\xe8\x76\x8f\x04\xc2\x5b\xe2\x73\xb1\x14\x5d\xf4\xbe\x3e\x4b\x61\x41\xcc\xc5\xed\x54\x28\xe5\x20\x86\xcb\xd1\xdf\xbf\x71\x9e\x3f\xce\xfe\x4b\x76\x50\x38\x77\x46\x3f\x1f\x8f\xf6\x2d\xc8\xab\x77\x7d\xe3\x46\xea\xcc\xdc\x84\x46\x2b\x23\x32\x88\x21\xaf\x75\x4a\xd2\xe8\x17\x2f\xa1\xb9\x67\xbf\xb7\x56\xac\xc2\xca\x1a\x32\xde\x91\x30\x37\xf6\x54\xa4\x65\x98\x0a\xa5\x5e\xdc\x3b\x30\x7e\x20\xd7\x56\x8d\x41\xea\x0c\x6f\x5f\x36\x83\x8d\xe1\xc7\x18\xde\xf9\xab\xa9\xa9\x35\x79\xf4\xcb\x77\xf7\xb0\xf6\xbe\xdd\xbe\xeb\xcb\xbf\x59\xaf\x6e\x03\x46\xbc\x7b\x2d\x45\xbc\x7b\x90\xdf\xc5\xff\x0c\x00\x00\xff\xff\x0f\x99\x11\x14\xbb\x0b\x00\x00"),
		},
		"/vulns.html": &vfsgen۰CompressedFileInfo{
			name:             "vulns.html",
			modTime:          time.Date(2020, 11, 5, 11, 13, 3, 437592395, time.UTC),
			uncompressedSize: 2728,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xa4\x56\x6f\x6f\xdb\xb6\x13\x7e\x9f\x4f\x71\x21\xfa\x32\x32\x91\x04\x3f\x34\xbf\x40\x16\xb6\x26\xc1\x56\xa0\xdb\x82\x36\x1d\x36\x14\xc5\x40\x49\x27\x89\x35\x45\x6a\xe4\xc9\xab\x27\xe8\xbb\x0f\x14\x65\x5b\xfe\x97\x66\x98\x5f\xc8\xb2\xef\xee\xb9\x7b\x9e\x3b\xf1\xd4\x75\x39\x16\x52\x23\xb0\x65\xab\xb4\x63\x7d\x7f\x16\x9f\xdf\xff\x72\xf7\xf4\xfb\xe3\x03\x54\x54\xab\xe4\x2c\x3e\x8f\xa2\x4f\xb2\x00\x45\xf0\xf6\x01\x5e\x7f\x4e\x60\xf8\xc4\xde\x0a\x99\x12\xce\xcd\x99\x36\xd1\x17\x07\x8a\x22\x89\xff\x0f\x5f\x37\xe1\xeb\x35\x4b\x20\x3e\xff\x84\x3a\x97\xc5\xe7\x28\xda\xa2\x4d\xa1\x5e\x80\xf6\x0c\xcc\xcd\x4b\x60\x4e\xc5\x97\x34\x42\xf8\x3f\x92\x23\xf1\x43\x60\x14\xed\x06\x57\x28\xf2\xe4\x6c\x48\x58\x23\x09\xc8\x2a\x61\x1d\xd2\x9c\xb5\x54\x44\x37\x6c\x6a\xaa\x88\x9a\x08\xff\x6c\xe5\x72\xce\x7e\x8b\x3e\x7e\x1f\xdd\x99\xba\x11\x24\x53\x85\x0c\x32\xa3\x09\x35\xcd\xd9\xdb\x87\x39\xe6\x25\x5e\x64\x95\x35\x35\xce\x2f\xd7\x10\x24\x49\x61\xd2\x75\x30\x7b\x8f\xa5\x74\x64\x57\x1f\xdf\xbf\x83\xbe\xe7\xe1\xaf\xc6\x40\xdf\xdf\xfa\xfb\x27\x51\x42\xdf\xc3\xaf\xad\xd2\x68\x45\x2a\x95\xa4\x15\x78\x07\x4b\x31\x0f\x28\x01\x51\x49\xbd\x00\x8b\x6a\xce\x64\x66\x34\x03\x5a\x35\x38\x67\xb2\x16\x25\x72\x99\x19\x06\x95\xc5\x62\xce\x3c\xe6\xa3\xa0\xea\xd1\x62\x21\xbf\xfa\x8c\x8e\x04\xc9\x8c\x17\x62\xe9\x03\x67\xde\xf7\x00\xd2\xd1\x4a\xa1\xab\x10\xe9\x9b\x38\x99\x73\x3c\x35\x86\x1c\x59\xd1\xcc\x6a\xa9\x67\x99\x73\x0c\x78\x72\x16\xf3\x20\x6f\x9c\x9a\x7c\x35\xa6\xc8\xe5\x72\xdd\x15\xaf\x99\x90\x1a\xed\x98\x7e\xb0\x9b\x4d\xd3\x52\x8b\x22\xcf\x6c\x5b\xa7\x13\xfb\x58\x66\x12\x8b\xb1\x2c\xce\x8e\x88\x1a\x73\x91\xc4\x5c\xc9\x83\xb8\x35\xb6\xc8\x48\x2e\x71\x1d\xba\x2f\xfe\x6e\x68\xcc\x8d\x4a\xce\xb6\x3f\x27\x0c\x1a\x51\x62\xe4\x39\xee\x70\x08\xe3\x7b\xf9\x2f\x9a\x1d\xbb\x5a\x28\x95\x1c\xef\x79\xb0\xc5\xbc\xba\x9c\xd6\x94\xcb\xe5\xe4\x67\xb3\xae\x88\xf0\x2b\x45\x56\x96\x15\xb1\xe4\x07\xf4\x68\x84\x39\x18\x7d\x0b\x5d\x37\xbb\x17\x84\x9e\x5d\x33\xa1\xd3\x75\xe1\xd9\x99\xbd\x11\xb9\xcf\xef\xe0\x7f\x7d\x7f\x94\xac\x50\x68\x09\x86\x6b\x94\x0b\x5d\xa2\x65\x60\x8d\xc2\xd1\xb2\x27\x40\xd7\x6d\x10\xfb\x1e\x7e\x94\x65\x75\x01\x77\x56\x92\xcc\x84\xba\x00\xa1\x73\x6e\x2c\xdc\x63\x91\x19\x7d\x09\xcb\x09\x71\x89\x0e\x0a\xd3\xea\xfc\x14\xd9\xae\x43\x9d\xf7\xfd\xa4\x23\xd5\x55\xf2\xa1\xad\x6b\x61\x57\x31\xaf\xae\x26\xb2\xb4\x9b\x61\x52\xd2\x51\x54\x5a\xd3\x36\xec\xe4\x50\x6c\x7d\x22\x49\x58\xef\x39\x0e\xce\xae\x11\x7a\x33\x9f\x22\x2f\xc3\x08\x29\xd4\x30\x0b\xe2\x79\x79\xbd\xd3\x91\xd8\x34\x79\x32\x24\x54\xcc\xd3\xbd\x0a\x0e\x06\xb5\xeb\xac\xd7\x17\x5e\x2d\x70\x75\x01\xaf\x96\x42\xb5\x08\xb7\xf3\x31\xc7\x9b\xd5\x07\x5c\xa2\x95\xb4\x9a\x34\xea\xbf\x51\x51\x22\x45\x05\xc3\x35\xea\xba\xcc\x28\x63\x87\xe4\x7d\x0f\x4d\xab\xd4\x7a\xa0\x46\xaa\x63\x41\xa7\xa9\x76\xdd\x10\x0d\xfb\xf5\x1d\x21\x1a\x5a\xb9\xf5\x68\x77\x1e\xb5\xea\x2a\xb9\x47\x12\x52\xb9\xdd\xc6\x6e\x04\x1a\x56\xdd\x37\xa4\xd9\x3a\xaf\x75\x0c\x61\x27\xc6\xbc\x11\x1a\x15\x0c\xd7\x28\xc7\x42\xb4\x6a\x7f\xb4\x0f\xbc\x87\x23\x40\xea\xf2\x98\xcc\xd5\xf5\xae\xeb\x70\x82\x7b\x29\x43\x39\xb3\x9f\x45\x8d\x7b\x3a\xbd\xbc\x45\x01\x62\xcb\x79\xaf\x5b\x07\xf6\x93\xb3\xc9\xab\xeb\xfd\xa1\xdc\x79\xe6\x8e\xd3\xf6\xc7\x3a\x3b\xd6\xfe\x31\xf1\x3d\xba\xcc\xca\x86\xa4\xd1\x07\xa3\xf0\x02\xf8\xc2\x18\x3a\x38\x58\x07\x57\xb1\xd9\x49\x63\xa6\x77\x52\x2f\xfa\x9e\x01\x09\x5b\xfa\xed\xfd\x47\xaa\x84\x5e\x4c\x34\x08\x0e\x7e\x2f\x3c\x57\xc7\x89\x93\xe6\xf4\xc9\x13\x4a\xdc\x39\x7c\x33\xd4\x87\x55\xc7\x4d\xf2\x93\xc8\x11\xfe\x92\x54\x41\x9c\x99\x1c\x93\xf8\x3a\xe6\xc3\x0d\xa4\xab\x2d\x23\xff\x92\xe1\x6e\x39\x2f\x25\x55\x6d\x3a\xcb\x4c\xcd\xbf\xa0\x73\x85\x15\x7f\xb3\xe4\xbb\xf5\x6d\xd8\x6f\xcd\x41\x8e\xbb\x0a\xb3\x85\x69\x09\xa8\x42\x70\xa6\xb5\x19\x82\xcf\x01\x82\x6e\x9f\xcd\x51\xa2\x6e\xa5\x46\x32\x46\x39\x6e\xb1\x64\xc9\x33\xc6\x83\xec\x31\x0f\x3a\x8c\x2b\x3e\x88\x18\xf3\xb0\xf5\x63\x1e\x5e\x3e\xd7\xe2\xfd\x13\x00\x00\xff\xff\x42\x6e\x10\x81\xa8\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/repositories.html"].(os.FileInfo),
		fs["/tags.html"].(os.FileInfo),
		fs["/vulns.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
